---
import { KPI_CATEGORIES, KPI_COLORS } from '../types/kpi';

export interface Props {
  kpi?: {
    id: string;
    name: string;
    description?: string;
    value: number;
    target?: number;
    unit: string;
    category: string;
    color: string;
  };
  isEdit?: boolean;
}

const { kpi, isEdit = false } = Astro.props;
const formTitle = isEdit ? 'Edit KPI' : 'Add New KPI';
---

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" id="kpi-form-modal">
  <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-semibold text-gray-900">{formTitle}</h2>
        <button 
          type="button" 
          class="text-gray-400 hover:text-gray-600 transition-colors"
          id="close-form"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="kpi-form" class="space-y-4">
        <!-- KPI Name -->
        <div>
          <label for="name" class="form-label">KPI Name *</label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            class="form-input" 
            placeholder="e.g., Monthly Revenue"
            value={kpi?.name || ''}
            required
          />
        </div>

        <!-- Description -->
        <div>
          <label for="description" class="form-label">Description</label>
          <textarea 
            id="description" 
            name="description" 
            rows="3"
            class="form-input" 
            placeholder="Optional description of this KPI"
          >{kpi?.description || ''}</textarea>
        </div>

        <!-- Current Value -->
        <div>
          <label for="value" class="form-label">Current Value *</label>
          <input 
            type="number" 
            id="value" 
            name="value" 
            class="form-input" 
            placeholder="0"
            step="0.01"
            value={kpi?.value || ''}
            required
          />
        </div>

        <!-- Target Value -->
        <div>
          <label for="target" class="form-label">Target Value</label>
          <input 
            type="number" 
            id="target" 
            name="target" 
            class="form-input" 
            placeholder="Optional target to track progress"
            step="0.01"
            value={kpi?.target || ''}
          />
        </div>

        <!-- Unit -->
        <div>
          <label for="unit" class="form-label">Unit *</label>
          <input 
            type="text" 
            id="unit" 
            name="unit" 
            class="form-input" 
            placeholder="e.g., $, %, users, sales"
            value={kpi?.unit || ''}
            required
          />
        </div>

        <!-- Category -->
        <div>
          <label for="category" class="form-label">Category *</label>
          <select id="category" name="category" class="form-input" required>
            <option value="">Select a category</option>
            {KPI_CATEGORIES.map(cat => (
              <option 
                value={cat} 
                selected={kpi?.category === cat}
              >
                {cat}
              </option>
            ))}
          </select>
        </div>

        <!-- Color -->
        <div>
          <label for="color" class="form-label">Color *</label>
          <div class="grid grid-cols-4 gap-2 mt-2">
            {KPI_COLORS.map(color => (
              <button
                type="button"
                class={`w-full h-10 rounded-md border-2 transition-all ${
                  (kpi?.color === color) ? 'border-gray-900 scale-95' : 'border-gray-200 hover:border-gray-300'
                }`}
                style={`background-color: ${color};`}
                data-color={color}
                data-color-selector
              >
                <span class="sr-only">Select {color}</span>
              </button>
            ))}
          </div>
          <input 
            type="hidden" 
            id="color" 
            name="color" 
            value={kpi?.color || KPI_COLORS[0]}
            required
          />
        </div>

        <!-- Form Actions -->
        <div class="flex space-x-3 pt-4">
          <button 
            type="submit" 
            class="flex-1 btn-primary"
            id="submit-btn"
          >
            {isEdit ? 'Update KPI' : 'Create KPI'}
          </button>
          <button 
            type="button" 
            class="btn-secondary"
            id="cancel-btn"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  import { addKPI, updateKPI } from '../utils/storage';

  const modal = document.getElementById('kpi-form-modal');
  const form = document.getElementById('kpi-form') as HTMLFormElement;
  const colorInput = document.getElementById('color') as HTMLInputElement;
  const submitBtn = document.getElementById('submit-btn');
  
  // Color selection
  document.querySelectorAll('[data-color-selector]').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const color = target.getAttribute('data-color');
      
      if (color) {
        // Update UI
        document.querySelectorAll('[data-color-selector]').forEach(btn => {
          btn.classList.remove('border-gray-900', 'scale-95');
          btn.classList.add('border-gray-200');
        });
        
        target.classList.remove('border-gray-200');
        target.classList.add('border-gray-900', 'scale-95');
        
        // Update hidden input
        colorInput.value = color;
      }
    });
  });

  // Form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const kpiData = {
      name: formData.get('name') as string,
      description: formData.get('description') as string || undefined,
      value: parseFloat(formData.get('value') as string),
      target: formData.get('target') ? parseFloat(formData.get('target') as string) : undefined,
      unit: formData.get('unit') as string,
      category: formData.get('category') as string,
      color: formData.get('color') as string,
    };

    try {
      submitBtn!.textContent = 'Saving...';
      submitBtn!.setAttribute('disabled', 'true');

      // Check if this is an edit or create
      const kpiId = form.getAttribute('data-kpi-id');
      
      if (kpiId) {
        // Edit existing KPI
        updateKPI(kpiId, kpiData);
      } else {
        // Create new KPI
        addKPI(kpiData);
      }

      // Close modal and refresh page
      modal?.remove();
      window.location.reload();
      
    } catch (error) {
      console.error('Error saving KPI:', error);
      alert('Error saving KPI. Please try again.');
    } finally {
      submitBtn!.textContent = form.getAttribute('data-kpi-id') ? 'Update KPI' : 'Create KPI';
      submitBtn!.removeAttribute('disabled');
    }
  });

  // Close modal handlers
  document.getElementById('close-form')?.addEventListener('click', () => {
    modal?.remove();
  });

  document.getElementById('cancel-btn')?.addEventListener('click', () => {
    modal?.remove();
  });

  // Close on backdrop click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      modal?.remove();
    }
  });
</script> 